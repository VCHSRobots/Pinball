#! /usr/bin/python
# pb_status -- Show the status of the pinball machine. 
#
# Pinball Machine Project, EPIC Robotz, Fall 2022
# Epic Robotz, Fall 2020
# dlb

import pb_log
pb_log.disable()
import time
import pygame as pyg
import common 
if common.platform() == "real":
    import comm_bus
    comm = comm_bus.CommBus()
else:
    comm = None

simg = []

nodes = {2: {'name': "S Lts", 'active': False, 'cmds': 0, "errs": 0, "col":  0, "line":  0, "nsw":  0, "ibs": 0},
         3: {'name': "P Lts", 'active': False, 'cmds': 0, "errs": 0, "col":  0, "line":  0, "nsw":  0, "ibs": 0},
         4: {'name': "Flprs", 'active': False, 'cmds': 0, "errs": 0, "col": 36, "line":  4, "nsw":  8, "ibs": 1}, 
         5: {'name': "Bmprs", 'active': False, 'cmds': 0, "errs": 0, "col": 50, "line":  4, "nsw":  3, "ibs": 1},
         6: {'name': "Kckrs", 'active': False, 'cmds': 0, "errs": 0, "col": 50, "line": 10, "nsw":  3, "ibs": 1},
         7: {'name': "Lanes", 'active': False, 'cmds': 0, "errs": 0, "col":  8, "line":  4, "nsw": 11, "ibs": 2},
         8: {'name': "Targs", 'active': False, 'cmds': 0, "errs": 0, "col": 21, "line":  4, "nsw":  8, "ibs": 2},
         9: {'name': "Test ", 'active': False, 'cmds': 0, "errs": 0, "col":  0, "line":  0, "nsw":  0, "ibs": 1} }

bus_cycle = 0 
bus_err = 0

def split_bytes(dat):
    idat = [] 
    for x in dat:
        idat.append((x >> 4) & 0x000F)
        idat.append(x & 0x000F) 
    return idat

def split_bits(dat):
    idat = []
    for x in dat:
        for i in range(8):
            mask = 1 << i 
            if x & mask != 0: idat.append(True) 
            else: idat.append(False)
    return idat 

def init_screen_layout():
    #            00000000001111111111122222222233333333334444444444555555555566666666667777777777     
    #            01234567890123456789012345678901234567890123456789012345678901234567890123456789 Line 
    simg.append("EPIC Pinball Machine -- Status Monitor                                          ") #   0
    simg.append("                                                                                ") #   1
    simg.append("  Lanes         Targets       Flippers      J.Bumpers     Nodes                 ") #   2
    simg.append("  -----         -------       --------      ---------     -----      cmds ers   ") #   3
    simg.append("  1-T1:         1-E:          1-RB:         1-TR:         2-S Lts:      -   -   ") #   4
    simg.append("  2-T2:         2-P:          2-LB:         2-TL:         3-P Lts:      -   -   ") #   5
    simg.append("  3-T3:         3-I:          3-SB:         3-B :         4-Flprs:      -   -   ") #   6
    simg.append("  4-T4:         4-C:          4-B1:                       5-Bmprs:      -   -   ") #   7
    simg.append("  5-RP:         5-PN:         5-B2:         Kickers       6-Kckrs:      -   -   ") #   8
    simg.append("  6-SL:         6-TR:         6-B3:         -------       7-Lanes:      -   -   ") #   9
    simg.append("  7-DL:         7-TL:         7-B4:         1-TL:         8-Targs:      -   -   ") #  10
    simg.append("  8-FL:         8-  :         8-  :         2-TR:         9-Test :      -   -   ") #  11
    simg.append("  9-DR:                                     3-B :                               ") #  12
    simg.append(" 10-FR:                                                                         ") #  13
    simg.append(" 11-  :               Bus Cycles: 000000  Bus Errs: 000000      (^C to exit)    ") #  14
    simg.append("                                                                                ") #  15

def clear_screen():
    ''' Clears room on the screen for the screen image. 
    leaves cursor at the bottom right. '''
    nlines = len(simg) 
    for i in range(nlines): print("")
    print("", flush=True) 

def update_screen():
    ''' Updates the screen with the image. Assumes the cursor is at the bottom'''
    nlines = len(simg)
    print("\x0D", end="")   # CR to be at beginning of the line.
    for i in range(nlines): print("\x1B[A", end="")
    for s in simg:
        print(s, flush=True)

def write_screen(txt, x, y):
    if y < 0 or y >= len(simg): return
    if x < 0: return
    i = 0
    for c in txt: 
        ix = i + x
        i += 1 
        if ix >= 80: return 
        simg[y] = simg[y][0:ix] + c + simg[y][ix+1:]

last_node_status_update = time.monotonic()
def update_node_status():
    global last_node_status_update
    if comm is None: return
    tnow = time.monotonic()
    if tnow - last_node_status_update < 1.0: return 
    last_node_status_update = tnow
    iline = 4
    for nodeaddr in nodes:
        cmd = [100, 10] # echo command 
        rsp = comm.node_io(nodeaddr, cmd)
        if rsp is None:
            nodes[nodeaddr]['active'] = False 
            ss = "      -   -"
        else:
            cmds, errs = -1, -1
            if len(rsp) >= 1: cmds = rsp[0]
            if len(rsp) >= 2: errs = rsp[1]
            nodes[nodeaddr]['active'] = True 
            nodes[nodeaddr]['cmds'] = cmds
            nodes[nodeaddr]['errs'] = errs
            if cmds >= 0: s1 = f" {cmds:03}"
            else: s1 = "  ?"
            if errs >= 0: s2 = f" {errs:03}"
            else: s2 = "  ?"
            ss = " OK" + s1 + s2
        sline = f"{nodeaddr:1}-{nodes[nodeaddr]['name']}:" + ss
        write_screen(sline, 58, iline)
        iline += 1

def split_bytes(dat):
    idat = [] 
    for x in dat:
        idat.append(x & 0x000F) 
        idat.append((x >> 4) & 0x000F)
    return idat

def clear_node_info(icol, iline, n, val="    "):
    for i in range(n):
        write_screen(val, icol, iline + i)

def update_switch_node(node_addr):
    global bus_cycle, bus_err
    icol  = nodes[node_addr]['col']
    iline = nodes[node_addr]['line']
    nsw   = nodes[node_addr]['nsw']
    ibs   = nodes[node_addr]['ibs']
    if not nodes[node_addr]['active'] or comm is None: 
        clear_node_info(icol, iline, nsw)
        return
    rsp = comm.node_io(node_addr)
    bus_cycle += 1 
    if rsp == None:
        bus_err += 1  
        clear_node_info(icol, iline, nsw)
        return
    nb, ib0, ib1 = 1, 3, 4
    if ibs == 2: 
        nb, ib0, ib1 = 2, 3, 5
    nswb = int(nsw / 2) 
    if nsw % 2 != 0: nswb += 1  
    if len(rsp) < 3 + nb + nswb:
        clear_node_info(icol, iline, nsw, val="  ? ")     
        return 
    sw_bits = split_bits(rsp[ib0:ib1])
    sw_cnts = split_bytes(rsp[ib1:ib1+nswb])
    for i in range(nsw):
        s = " "
        if sw_bits[i]: s = "X"
        ss = f"{s} {sw_cnts[i]:02}"
        write_screen(ss, icol, i + iline)
    
def set_businfo(cyc, ers):
    write_screen(f"{cyc:06}", 34, 14)
    write_screen(f"{ers:06}", 52, 14)

def run():
    if comm is not None: comm.begin()
    init_screen_layout()
    clear_screen()
    try:
        while(True):
            set_businfo(bus_cycle, bus_err)
            update_node_status()  
            update_switch_node(4)  # 4: Flippers
            update_switch_node(5)  # 5: Jet Bumpers
            update_switch_node(6)  # 6: Sling Slot Kickers
            update_switch_node(7)  # 7: Lanes
            update_switch_node(8)  # 8: Targets
            update_screen()
            time.sleep(0.05)
    except KeyboardInterrupt:
        print("")
        return

if __name__ == "__main__":
    run() 


# import time

# def xline(i):
#      for j in range(10):
#         k = i * 10 + j
#         print(f"{k:2} ", end="", flush=True)
#         time.sleep(0.1)   


# xline(0)
# # print("\x0D", end="", flush=True)
# print("\n", end="", flush=True)
# xline(1)

# print("\x1B[A\x0D", end="", flush=True)
# #print("\x0D", end="", flush=True)

# xline(2)
# #print("\x0D", end="", flush=True)
# print("\n", end="", flush=True)
# xline(3)

# print("\n")